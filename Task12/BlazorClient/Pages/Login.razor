@page "/login"
@using BlazorClient.Authentication
@using BlazorClient.Models
@using BlazorClient.Services
@inject IAuthenticationService _authenticationService;
@inject IJSRuntime _js;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3 ">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name"/>
        </div>
        <div class="mb-3 ">
            <label>Password</label>
            <input @bind="model.Password"  type="password" class="form-control" placeholder="Password"/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authentication" class="btn btn-dark">Login</button>
        </div>
    </div> 
</div>
@code {

    private UserModel model = new();
    private async Task Authentication()
    {
        UserAccount userAccount =  await _authenticationService.GetUser(model.UserName);
        if(await _authenticationService.ValidateUser(model))
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.UserName,
                    Role = userAccount.Role
                });
                navManager.NavigateTo("/", true);
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }
}
